name: CI

on:
  push:
    branches: [ "main", "dev" ]
    paths: [ ".github/workflows/ci.yml", "src/**", "test/**", "SharpLzo.sln" ]
  pull_request:
    branches: [ "main", "dev" ]
    paths: [ ".github/workflows/ci.yml", "src/**", "test/**", "SharpLzo.sln" ]
  workflow_dispatch:

env:
  LZO_VERSION: "2.10"

jobs:
  compile-lzo:
    name: Compile lzo (${{ matrix.compiler.rid }})
    runs-on: ubuntu-latest

    strategy:
      matrix:
        compiler:
          - {target: windows-static-x86, src: liblzo2.dll, dst: liblzo2.dll, rid: win-x86}
          - {target: windows-static-x64, src: liblzo2.dll, dst: liblzo2.dll, rid: win-x64}
          - {target: linux-x64, src: liblzo2.so.2.0.0, dst: liblzo2.so, rid: linux-x64}
          - {target: linux-armv6, src: liblzo2.so.2.0.0, dst: liblzo2.so, rid: linux-arm}
          - {target: linux-arm64, src: liblzo2.so.2.0.0, dst: liblzo2.so, rid: linux-arm64}
          - {target: web-wasm, src: liblzo2.a, dst: liblzo2.a, rid: browser-wasm}
    
    container:
      image: dockcross/${{ matrix.compiler.target }}

    steps:
    - uses: actions/checkout@v4

    - name: Cache lzo-${{ env.LZO_VERSION }}
      id: cache-lzo
      uses: actions/cache@v4
      with:
        path: runtimes
        key: lzo-${{ env.LZO_VERSION }}-${{ matrix.compiler.rid }}-a

    - name: Download and extract lzo-${{ env.LZO_VERSION }}
      if: steps.cache-lzo.outputs.cache-hit != 'true'
      run: | 
        wget https://www.oberhumer.com/opensource/lzo/download/lzo-${{ env.LZO_VERSION }}.tar.gz
        tar -xzvf lzo-${{ env.LZO_VERSION }}.tar.gz
    
    - name: Compile lzo-${{ env.LZO_VERSION }}
      if: steps.cache-lzo.outputs.cache-hit != 'true'
      run: |
        cmake -B build/${{ matrix.compiler.target }} -S lzo-${{ env.LZO_VERSION }}/ -G Ninja -DENABLE_STATIC=0 -DENABLE_SHARED=1
        ninja -C build/${{ matrix.compiler.target }} lzo_shared_lib
        mkdir -p runtimes/${{ matrix.compiler.rid }}/native
        cp build/${{ matrix.compiler.target }}/${{ matrix.compiler.src }} runtimes/${{ matrix.compiler.rid }}/native/${{ matrix.compiler.dst }}

  build:
    runs-on: ubuntu-latest

    needs: compile-lzo

    steps:
    - uses: actions/checkout@v4

    - name: Retrieve lzo-${{ env.LZO_VERSION }} from cache
      uses: actions/cache@v4
      with:
        path: runtimes
        key: lzo-${{ env.LZO_VERSION }}
        restore-keys: |
          lzo-${{ env.LZO_VERSION }}-win-x86-a
          lzo-${{ env.LZO_VERSION }}-win-x64-a
          lzo-${{ env.LZO_VERSION }}-linux-x64-a
          lzo-${{ env.LZO_VERSION }}-linux-arm-a
          lzo-${{ env.LZO_VERSION }}-linux-arm64-a
          lzo-${{ env.LZO_VERSION }}-browser-wasm-a


    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          8.0.x
          
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build -c Release --no-restore  /p:ContinuousIntegrationBuild=true
      
    - name: Test
      run: dotnet test -c Release --no-build --verbosity normal --no-build --collect:"XPlat Code Coverage" --results-directory ./coverage
      
    - name: Code Coverage Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: coverage/**/coverage.cobertura.xml
        badge: true
        fail_below_min: true
        format: text
        hide_branch_rate: false
        hide_complexity: true
        indicators: true
        output: both
        thresholds: '10 30'